<?xml version="1.0" encoding="UTF-8"?><testrun name="FreeMarkerTest.testFreeMarker" project="taotao-portal" tests="1" started="1" failures="0" errors="1" ignored="0">
  <testcase name="testFreeMarker" classname="com.taotao.freemarker.FreeMarkerTest" time="0.354">
    <error>FreeMarker template error:&#13;
For "#list" list source: Expected a sequence or collection, but this has evaluated to an extended_hash+string (com.taotao.freemarker.FreeMarkerTest$student wrapped into f.e.b.StringModel):
==&gt; student  [in template "second.ftl" at line 11, column 16]&#13;
&#13;
----&#13;
FTL stack trace ("~" means nesting-related):&#13;
	- Failed at: #list student as s  [in template "second.ftl" at line 11, column 9]&#13;
----&#13;
&#13;
Java stack trace (for programmers):&#13;
----&#13;
freemarker.core.NonSequenceOrCollectionException: [... Exception message was already printed; see it above ...]&#13;
	at freemarker.core.IteratorBlock$IterationContext.executeNestedBlockInner(IteratorBlock.java:295)&#13;
	at freemarker.core.IteratorBlock$IterationContext.executeNestedBlock(IteratorBlock.java:220)&#13;
	at freemarker.core.IteratorBlock$IterationContext.accept(IteratorBlock.java:194)&#13;
	at freemarker.core.Environment.visitIteratorBlock(Environment.java:572)&#13;
	at freemarker.core.IteratorBlock.acceptWithResult(IteratorBlock.java:78)&#13;
	at freemarker.core.IteratorBlock.accept(IteratorBlock.java:64)&#13;
	at freemarker.core.Environment.visit(Environment.java:324)&#13;
	at freemarker.core.MixedContent.accept(MixedContent.java:54)&#13;
	at freemarker.core.Environment.visit(Environment.java:324)&#13;
	at freemarker.core.Environment.process(Environment.java:302)&#13;
	at freemarker.template.Template.process(Template.java:325)&#13;
	at com.taotao.freemarker.FreeMarkerTest.testFreeMarker(FreeMarkerTest.java:75)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)&#13;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)&#13;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)&#13;
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)&#13;
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)&#13;
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)&#13;
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)&#13;
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)&#13;
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)&#13;
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)&#13;
&#13;
</error>
  </testcase>
</testrun>
